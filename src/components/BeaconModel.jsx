/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 beacon.glb 
*/

import React from 'react'
import { useState, useRef, useLayoutEffect } from 'react';
import { useGLTF, useScroll } from '@react-three/drei'
import { useFrame } from "@react-three/fiber";
import * as THREE from 'three'
import gsap from "gsap";

const FLOOR_HEIGHT = 8;
const NB_FLOORS = 2;

const BeaconModel = (props) => {
  const { nodes, materials } = useGLTF('./models/beacon.glb')
  const ref = useRef();
  const batteriesRef = useRef();
  const chipsRef1 = useRef();
  const chipsRef2 = useRef();
  const pcbRef = useRef();
  const tl = useRef();
  const scroll = useScroll();
  const [enclosureOpacity, setEnclosureOpacity] = useState(materials['Aluminum_-_Bead_Blasted.001']);

  var textureLoader = new THREE.TextureLoader();
  var texture = textureLoader.load('./noise.jpg');

  texture.wrapS = THREE.RepeatWrapping;
  texture.wrapT = THREE.RepeatWrapping;
  
  const anodisedMaterial = new THREE.MeshStandardMaterial({
    color: 0xff9a42,//0xec984e, 
    roughness: 0.4,
    metalness: 0.8,
    roughnessMap: texture,
    metalnessMap: texture,
    envMap: texture, // important -- especially for metals!
    opacity: enclosureOpacity,
    transparent: true,
    envMapIntensity: 10
  })

  const pcbMaterial = new THREE.MeshStandardMaterial({
    color: 0x008800,//0xec984e, 
    roughness: 0.95,
    metalness: 0.02,
    roughnessMap: texture,
    // metalnessMap: texture,
    envMap: texture, // important -- especially for metals!
    envMapIntensity: 1
  })

  const wireframeMaterial = new THREE.MeshStandardMaterial({
    wireframe: true
  })

  const insulatorMaterial = new THREE.MeshStandardMaterial({
    color: 0x666666,
    roughness: 0.6,
    metalness: 0.1,
    roughnessMap: texture,
    metalnessMap: texture,
    envMap: texture, // important -- especially for metals!
    envMapIntensity: 1
  })

  const batteryMaterial = new THREE.MeshStandardMaterial({
    color: 0x049ef4,
    roughness: 0.1,
    metalness: 0.2,
  })

  useFrame(() => {
    tl.current.seek(scroll.offset * tl.current.duration());
    
    setEnclosureOpacity(1 - 0.8 * scroll.range(0, 1/3));
  })

  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    // Rotation animation
    tl.current.to(
      ref.current.rotation,
      {
        duration: 1.5,
        x: Math.PI / 2.8,
        y: Math.PI * 1.2,
        z: Math.PI / 5
      },
      0
    );

    tl.current.to(
      ref.current.scale,
      {
        duration: 1.5,
        x: 0.8,
        y: 0.8,
        z: 0.8
      },
      0
    );

    tl.current.to(
      ref.current.position,
      {
        duration: 1.5,
        x: -6,
        y: -1.5,
        z: 0
      },
      0
    );

    // Translation animation
    tl.current.to(
      batteriesRef.current.position,
      {
        duration: 1,
        y: 2,
        z: 4
      },
      0.6
    );

    tl.current.to(
      pcbRef.current.position,
      {
        duration: 1,
        y: 4,
        z: -2
      },
      0.5
    );

    tl.current.to(
      chipsRef1.current.position,
      {
        duration: 1,
        y: 8,
        x: -2,
        z: -2
      },
      0.3
    );
    tl.current.to(
      chipsRef2.current.position,
      {
        duration: 1,
        y: 8
      },
      0.4
    );
  }, []);

  // console.log(materials['Aluminum_-_Bead_Blasted.001'])

  return (
    <group {...props} dispose={null}>
      <group rotation={[Math.PI / 2, Math.PI, 0]} scale={[1,1,1]} ref={ref}>
        
        {/* Enclosure */}
        <group>
          <mesh position={[0,2.42,3.1]}>
            <boxGeometry args={[5.4, 0.1, 0.86]} />
            <meshStandardMaterial 
              transparent 
              opacity={enclosureOpacity} 
              color={'#e67e22'}
              roughness={0.4}
              metalness={0.8}
              roughnessMap={texture}
              metalnessMap={texture}
              envMap={texture}
              envMapIntensity={1} />
          </mesh>
          <mesh geometry={nodes['Beacon-model_1'].geometry} material={anodisedMaterial} />
        </group>

        {/* Batteries */}
        <group position={[0,0,0]}>
          <group ref={batteriesRef}>
            <mesh geometry={nodes['Beacon-model_2'].geometry} material={batteryMaterial} />
          </group>
        </group>

        {/* chip (yet to identify) */}
        <group position={[0,0,0]}>
          <group ref={chipsRef1}>
            {/* Iridium */}
            <mesh geometry={nodes['Beacon-model_18'].geometry} material={materials['Opaque(144,144,144)']} />
          </group>
        </group>
        <group position={[0,0,0]}>
          <group ref={chipsRef2}>
            {/* IMU */}
            <mesh geometry={nodes['Beacon-model_6'].geometry} material={materials['Opaque(128,128,128)']} />
          </group>
        </group>
        

        

        {/* Chip (yet to identify) */}
        <group position={[0,0,0]}>
          <group ref={pcbRef}>
            {/* PCB + P/C 104 */}
            <mesh geometry={nodes['Beacon-model_3'].geometry} material={insulatorMaterial} />
            <mesh geometry={nodes['Beacon-model_5'].geometry} material={pcbMaterial} />
            
            {/* Harwin green connector */}
            <mesh geometry={nodes['Beacon-model_7'].geometry} material={materials['Opaque(133,237,168)']} />
            <mesh geometry={nodes['Beacon-model_8'].geometry} material={materials['Opaque(168,168,168)']} />
            <mesh geometry={nodes['Beacon-model_9'].geometry} material={materials['Opaque(255,206,117)']} />
            
            {/* Coaxial connectors */}
            <mesh geometry={nodes['Beacon-model_10'].geometry} material={materials['Opaque(66,66,66)']} />
            <mesh geometry={nodes['Beacon-model_13'].geometry} material={materials['Opaque(236,236,236)']} />
          </group>
        </group>
        
        
        
      </group>
    </group>
  )
}


useGLTF.preload('./models/beacon.glb');

export { BeaconModel };