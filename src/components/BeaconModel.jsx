/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 beacon.glb 
*/

import React from 'react'
import { useState, useRef, useLayoutEffect } from 'react';
import { useGLTF, useScroll } from '@react-three/drei'
import { useFrame } from "@react-three/fiber";
import * as THREE from 'three'
import gsap from "gsap";

const FLOOR_HEIGHT = 8;
const NB_FLOORS = 2;

const BeaconModel = (props) => {
  const { nodes, materials } = useGLTF('./models/beacon-bare.glb')
  const ref = useRef();
  const tl = useRef();
  const scroll = useScroll();

  var textureLoader = new THREE.TextureLoader();
  var texture = textureLoader.load('./noise.jpg');

  texture.wrapS = THREE.RepeatWrapping;
  texture.wrapT = THREE.RepeatWrapping;
  
  const anodisedMaterial = new THREE.MeshStandardMaterial({
    color: 0xff9a42,//0xec984e, 
    roughness: 0.4,
    metalness: 0.8,
    roughnessMap: texture,
    metalnessMap: texture,
    envMap: texture, // important -- especially for metals!
    envMapIntensity: 10
  })

  const pcbMaterial = new THREE.MeshStandardMaterial({
    color: 0x008800,//0xec984e, 
    roughness: 0.95,
    metalness: 0.02,
    roughnessMap: texture,
    // metalnessMap: texture,
    envMap: texture, // important -- especially for metals!
    envMapIntensity: 1
  })

  const wireframeMaterial = new THREE.MeshStandardMaterial({
    wireframe: true
  })

  const insulatorMaterial = new THREE.MeshStandardMaterial({
    color: 0x666666,
    roughness: 0.6,
    metalness: 0.1,
    roughnessMap: texture,
    metalnessMap: texture,
    envMap: texture, // important -- especially for metals!
    envMapIntensity: 1
  })

  const batteryMaterial = new THREE.MeshStandardMaterial({
    color: 0x049ef4,
    roughness: 0.1,
    metalness: 0.2,
  })

  useFrame(() => {
    tl.current.seek(scroll.offset * tl.current.duration());
    
  })

  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    // Rotation animation
    // tl.current.to(
    //   ref.current.rotation,
    //   {
    //     duration: 0.1,
    //     x: Math.PI / 2.8,
    //     y: Math.PI * 1.2,
    //     z: Math.PI / 5
    //   },
    //   0
    // );

    tl.current.to(
      ref.current.rotation,
      {
        duration: 8,
        x: 0,
        y: -1.5*Math.PI, // 2.5*Math.PI
        z: 0
      },
      2
    );

    // tl.current.to(
    //   ref.current.scale,
    //   {
    //     duration: 1.5,
    //     x: 0.8,
    //     y: 0.8,
    //     z: 0.8
    //   },
    //   0
    // );

  }, []);

  // console.log(materials['Aluminum_-_Bead_Blasted.001'])

  return (
    <group {...props} dispose={null}>
      <group rotation={[Math.PI / 2, Math.PI, 0]} scale={[1,1,1]} ref={ref}>
        
        <mesh position={[0,2.42,3.1]}>
          <boxGeometry args={[5.4, 0.1, 0.86]} />
          <meshStandardMaterial 
            color={'#e67e22'}
            roughness={0.4}
            metalness={0.8}
            roughnessMap={texture}
            metalnessMap={texture}
            envMap={texture}
            envMapIntensity={1} />
        </mesh>
        <mesh position={[-4.45,0.86,0]}>
          <boxGeometry args={[0.1, 0.86, 5.4]} />
          <meshStandardMaterial 
            color={'#e67e22'}
            roughness={0.1}
            metalness={0.8}
            roughnessMap={texture}
            metalnessMap={texture}
            envMap={texture}
            envMapIntensity={1} />
        </mesh>
        <mesh geometry={nodes.Beacon_bare001.geometry} material={anodisedMaterial} />
        <mesh geometry={nodes.Beacon_bare001_1.geometry} material={materials['Opaque(0,128,0).001']} />
        <mesh geometry={nodes.Beacon_bare001_2.geometry} material={materials['Opaque(128,128,128).001']} />
        <mesh geometry={nodes.Beacon_bare001_3.geometry} material={materials['Opaque(176,176,176).001']} />
        <mesh geometry={nodes.Beacon_bare001_4.geometry} material={materials['Opaque(255,255,0).001']} />
        <mesh geometry={nodes.Beacon_bare001_5.geometry} material={materials['Opaque(133,237,168).001']} />
        <mesh geometry={nodes.Beacon_bare001_6.geometry} material={materials['Opaque(168,168,168).001']} />
        <mesh geometry={nodes.Beacon_bare001_7.geometry} material={materials['Opaque(255,206,117).001']} />
        <mesh geometry={nodes.Beacon_bare001_8.geometry} material={materials['Opaque(66,66,66).001']} />
        <mesh geometry={nodes.Beacon_bare001_9.geometry} material={materials['Opaque(255,255,255).001']} />
        <mesh geometry={nodes.Beacon_bare001_10.geometry} material={insulatorMaterial} />
        <mesh geometry={nodes.Beacon_bare001_11.geometry} material={materials['Opaque(236,236,236).001']} />
        <mesh geometry={nodes.Beacon_bare001_12.geometry} material={materials['Opaque(73,73,73).001']} />
        <mesh geometry={nodes.Beacon_bare001_13.geometry} material={materials['Opaque(212,212,212).001']} />
        <mesh geometry={nodes.Beacon_bare001_14.geometry} material={materials['Opaque(220,160,15).001']} />
        <mesh geometry={nodes.Beacon_bare001_15.geometry} material={materials['Opaque(191,191,191).001']} />
        <mesh geometry={nodes.Beacon_bare001_16.geometry} material={materials['Opaque(144,144,144).001']} />
        <mesh geometry={nodes.Beacon_bare001_17.geometry} material={materials['Opaque(202,209,238).001']} />
        <mesh geometry={nodes.Beacon_bare001_18.geometry} material={materials['Opaque(127,127,127).001']} />
        <mesh geometry={nodes.Beacon_bare001_19.geometry} material={materials['Opaque(255,0,0).001']} />
        <mesh geometry={nodes.Beacon_bare001_20.geometry} material={materials['Opaque(175,175,175).001']} />
              
      </group>
    </group>
  )
}


useGLTF.preload('./models/beacon-bare.glb');

export { BeaconModel };